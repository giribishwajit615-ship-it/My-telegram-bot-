""" Telegram Universal Storage & Share Bot (Admin-Only Help + No Status) ✅ Always saves media in private channel ✅ Permanent non-expiring share links ✅ Only admin can upload new media ✅ /help, /list, /delete are admin-only """ import os import sqlite3 import logging import datetime from typing import Optional from telegram import Update from telegram.ext import ( ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, ) # ---------------- CONFIG ---------------- TOKEN = "8222645012:AAEQMNK31oa5hDo_9OEStfNL7FMBdZMkUFM" BOT_USERNAME = "Cornsebot" CHANNEL_ID = -1003292247930 # your private channel ID ADMIN_ID = 7681308594 DATABASE_FILE = "bot_storage.db" # ----------------------------------------- logging.basicConfig( format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO, ) logger = logging.getLogger(__name__) # ---------- SQLite Helper ---------- def init_db(path: str = DATABASE_FILE): conn = sqlite3.connect(path, check_same_thread=False) c = conn.cursor() c.execute( """ CREATE TABLE IF NOT EXISTS media ( id INTEGER PRIMARY KEY AUTOINCREMENT, type TEXT NOT NULL, file_id TEXT, message_id INTEGER, text_content TEXT, uploader_id INTEGER NOT NULL, caption TEXT, title TEXT, views INTEGER DEFAULT 0, created_at TEXT ) """ ) conn.commit() return conn DB_CONN = init_db() # ---------- DB Interaction ---------- def save_media(media_type: str, file_id: Optional[str], message_id: Optional[int], text_content: Optional[str], uploader_id: int, caption: Optional[str], title: Optional[str]) -> int: cur = DB_CONN.cursor() cur.execute( """INSERT INTO media (type, file_id, message_id, text_content, uploader_id, caption, title, views, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, 0, ?)""", (media_type, file_id, message_id, text_content, uploader_id, caption, title, datetime.datetime.utcnow().isoformat()), ) DB_CONN.commit() return cur.lastrowid def get_media_by_id(media_id: int): cur = DB_CONN.cursor() cur.execute("SELECT * FROM media WHERE id=?", (media_id,)) return cur.fetchone() def delete_media(media_id: int): cur = DB_CONN.cursor() cur.execute("DELETE FROM media WHERE id=?", (media_id,)) DB_CONN.commit() def get_all_media(): cur = DB_CONN.cursor() cur.execute("SELECT id, type, views, created_at FROM media ORDER BY id DESC") return cur.fetchall() def increment_views(media_id: int): cur = DB_CONN.cursor() cur.execute("UPDATE media SET views = views + 1 WHERE id=?", (media_id,)) DB_CONN.commit() def is_admin(user_id: int) -> bool: return user_id == ADMIN_ID # ---------- Handlers ---------- async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user args = context.args # Check if this is a share link if args and args[0].startswith("share_"): try: media_id = int(args[0].split("_")[1]) record = get_media_by_id(media_id) if not record: await update.message.reply_text("❌ File not found.") return _, media_type, file_id, message_id, text_content, _, caption, _, _, _ = record increment_views(media_id) if media_type == "text": await update.message.reply_text(text_content or "📄 Empty text.") else: try: await context.bot.copy_message( chat_id=update.effective_chat.id, from_chat_id=CHANNEL_ID, message_id=message_id ) except Exception as e: await update.message.reply_text(f"⚠️ Error sending file: {e}") return except Exception as e: await update.message.reply_text(f"⚠️ Error loading file: {e}") return # Normal start await update.message.reply_text( f"👋 Hello {user.first_name or 'User'}!\n\n" "📦 Use shared links to access files.\n\n" "🧑‍💻 Only admin can upload media.\n" "Use /help for commands (admin only)." ) async def handle_upload(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user if not is_admin(user.id): await update.message.reply_text("🚫 Only admin can upload files.") return message = update.message media_type = None sent_message = None try: if message.video: sent_message = await context.bot.send_video(CHANNEL_ID, message.video.file_id, caption=message.caption) media_type = "video" elif message.photo: sent_message = await context.bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=message.caption) media_type = "photo" elif message.document: sent_message = await context.bot.send_document(CHANNEL_ID, message.document.file_id, caption=message.caption) media_type = "document" elif message.audio: sent_message = await context.bot.send_audio(CHANNEL_ID, message.audio.file_id, caption=message.caption) media_type = "audio" elif message.text: sent_message = await context.bot.send_message(CHANNEL_ID, message.text) media_type = "text" else: await update.message.reply_text("⚠️ Unsupported media type.") return # Save record media_id = save_media( media_type, getattr(sent_message, media_type).file_id if media_type != "text" else None, sent_message.message_id, message.text if media_type == "text" else None, user.id, message.caption or "", None ) share_link = f"https://t.me/{BOT_USERNAME}?start=share_{media_id}" await update.message.reply_text(f"✅ Uploaded!\n🔗 Share link:\n{share_link}") except Exception as e: await update.message.reply_text(f"❌ Upload failed: {e}") async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user if not is_admin(user.id): await update.message.reply_text("🚫 Only admin can use /help.") return help_text = ( "📘 *Admin Commands*\n\n" "/start - Start or open shared file\n" "/help - Show this help (admin only)\n" "/list - Show all files\n" "/delete - Delete file by ID" ) await update.message.reply_text(help_text, parse_mode="Markdown") async def list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user if not is_admin(user.id): await update.message.reply_text("🚫 Only admin can use /list.") return records = get_all_media() if not records: await update.message.reply_text("📭 No media found.") return msg = "📂 *Stored Media Files:*\n\n" for rec in records: mid, mtype, views, created = rec msg += f"🆔 {mid} | {mtype} | 👁 {views} | 🗓 {created[:10]}\n" msg += "\nUse `/delete ` to remove any file." await update.message.reply_text(msg, parse_mode="Markdown") async def delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user if not is_admin(user.id): await update.message.reply_text("🚫 Only admin can use /delete.") return if not context.args: await update.message.reply_text("⚠️ Usage: /delete ") return try: media_id = int(context.args[0]) record = get_media_by_id(media_id) if not record: await update.message.reply_text("❌ File not found in database.") return _, media_type, file_id, message_id, *_ = record try: await context.bot.delete_message(chat_id=CHANNEL_ID, message_id=message_id) except Exception as e: logger.warning(f"Could not delete message from channel: {e}") delete_media(media_id) await update.message.reply_text(f"✅ File ID {media_id} deleted successfully.") except Exception as e: await update.message.reply_text(f"❌ Error deleting file: {e}") # ---------- MAIN ---------- def main(): app = ApplicationBuilder().token(TOKEN).build() app.add_handler(CommandHandler("start", start_handler)) app.add_handler(CommandHandler("help", help_handler)) app.add_handler(CommandHandler("list", list_handler)) app.add_handler(CommandHandler("delete", delete_handler)) app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_upload)) logger.info("Bot started successfully...") app.run_polling() if __name__ == "__main__": main() Kya hua hi fix karu vedio mara private channel me upload horahahi likin mujhe bot link nahi derahahi Thik karu